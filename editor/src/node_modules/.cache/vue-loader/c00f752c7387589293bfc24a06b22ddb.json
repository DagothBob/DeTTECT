{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/holger/DeTTECT_Project/DeTTECT/editor/src/pages/DataSourcesPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/holger/DeTTECT_Project/DeTTECT/editor/src/pages/DataSourcesPage.vue","mtime":1638057631669},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":1638056082284},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":1638056082020},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":1638056081964}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["DataSourcesPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DataSourcesPage.vue","sourceRoot":"pages","sourcesContent":["<template>\n    <div>\n        <div v-if=\"doc != null\" class=\"back-to-top\">\n            <label @click=\"navigateToTop\" class=\"cursor-pointer\" title=\"Back to top\">\n                <icons icon=\"arrow-up\"></icons>\n            </label>\n        </div>\n\n        <div class=\"row\" id=\"pageTop\">\n            <div class=\"col\">\n                <div class=\"card card-card\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\"><i class=\"tim-icons icon-coins\"></i> Data Sources</h2>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"row\">\n                            <div class=\"col\">\n                                <button type=\"button\" class=\"btn mr-md-3\" @click=\"askNewFile\">\n                                    <icons icon=\"file-empty\"></icons>\n                                    &nbsp;New file\n                                </button>\n                                <label class=\"custom-file-upload\">\n                                    <icons icon=\"file\"></icons>\n                                    &nbsp;Select YAML file\n                                    <file-reader @load=\"readFile($event)\" :setFileNameFn=\"setFileName\" :id=\"'dsFileReader'\"></file-reader>\n                                </label>\n                                <label v-if=\"fileChanged\" class=\"pl-2\">\n                                    <icons icon=\"text-balloon\"></icons>\n                                    You have unsaved changes. You may want to save the file to preserve your changes.</label\n                                >\n                            </div>\n                        </div>\n                        <div v-if=\"doc != null\" class=\"row pt-md-2\">\n                            <div class=\"col\">\n                                <file-details :filename=\"filename\" :doc=\"doc\" :platforms=\"platforms\"></file-details>\n                            </div>\n                        </div>\n                        <div v-if=\"doc != null\" class=\"row pt-md-2\">\n                            <div class=\"col card-text\">\n                                <button type=\"button\" class=\"btn\" @click=\"downloadYaml('data_sources', 'data_source_name')\">\n                                    <icons icon=\"save\"></icons>\n                                    &nbsp;Save YAML file\n                                </button>\n                            </div>\n                            <div class=\"col card-text\">\n                                <button type=\"button\" class=\"btn\"> <!-- TODO: @click=\"something\" -->\n                                    <icons icon=\"save\"></icons>\n                                    &nbsp;Fill from log files\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div v-if=\"doc != null\" class=\"row\">\n            <div class=\"col\">\n                <card type=\"card\">\n                    <div class=\"row\">\n                        <div class=\"col\">\n                            <p>\n                                <button\n                                    type=\"button\"\n                                    class=\"btn btn-secondary\"\n                                    @click=\"addItem('data_sources', 'data_source_name', emptyDataSourceObject)\"\n                                >\n                                    <icons icon=\"plus\"></icons>\n                                    &nbsp;Add data source\n                                </button>\n                            </p>\n                        </div>\n                    </div>\n                    <div class=\"row mt-md-2\">\n                        <div class=\"col\">\n                            <base-input v-model=\"filters.filter.value\" placeholder=\"filter\" />\n                            <v-table\n                                :data=\"doc.data_sources\"\n                                @selectionChanged=\"selectItem($event)\"\n                                selectedClass=\"table-selected-custom\"\n                                :filters=\"filters\"\n                                class=\"table-custom\"\n                                ref=\"data_table\"\n                            >\n                                <thead slot=\"head\">\n                                    <v-th sortKey=\"data_source_name\" defaultSort=\"asc\" width=\"350\">Name</v-th>\n                                    <v-th sortKey=\"date_registered\" width=\"200\">Date registered</v-th>\n                                    <v-th sortKey=\"products\" width=\"350\">Products</v-th>\n                                    <th></th>\n                                </thead>\n                                <tbody slot=\"body\" slot-scope=\"{ displayData }\">\n                                    <v-tr v-for=\"(row, i) in displayData\" :key=\"row.data_source_name\" :row=\"row\" ref=\"data_table_rows\">\n                                        <td>{{ row.data_source_name }}</td>\n                                        <td>{{ row.date_registered }}</td>\n                                        <td>{{ row.products | listToString }}</td>\n                                        <td>\n                                            <i\n                                                class=\"tim-icons icon-trash-simple cursor-pointer\"\n                                                :idx=\"i\"\n                                                :data_source_name=\"row.data_source_name\"\n                                                @click=\"deleteDataSource($event)\"\n                                            />\n                                        </td>\n                                    </v-tr>\n                                </tbody>\n                            </v-table>\n                        </div>\n                    </div>\n                </card>\n            </div>\n            <div class=\"col\">\n                <card type=\"card\">\n                    <data-source-detail\n                        v-if=\"getSelectedItem() != null\"\n                        :dataSource=\"getSelectedItem()\"\n                        :allDataSources=\"doc.data_sources\"\n                        :dqHelpText=\"dqHelpText\"\n                        :dsHelpText=\"dsHelpText\"\n                        :prevDataSourceQuality=\"prevDataSourceQuality\"\n                        :navigateItem=\"navigateItem\"\n                    ></data-source-detail>\n                </card>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\nimport DataSourceDetail from './DataSourceDetail';\nimport Icons from '@/components/Icons';\nimport jsyaml from 'js-yaml';\nimport moment from 'moment';\nimport constants from '@/constants';\nimport { pageMixin } from '../mixins/PageMixins.js';\nimport { navigateMixins } from '../mixins/NavigateMixins.js';\nimport { notificationMixin } from '../mixins/NotificationMixins.js';\nimport _ from 'lodash';\n\nexport default {\n    name: 'data-sources-page',\n    data() {\n        return {\n            filters: {\n                filter: {\n                    value: '',\n                    keys: ['data_source_name', 'date_registered', 'products']\n                }\n            },\n            prevDataSourceQuality: [],\n            data_columns: ['data_source_name', 'date_registered', 'products'],\n            dqFileToRender: 'https://raw.githubusercontent.com/wiki/rabobank-cdc/DeTTECT/Data-quality-scoring.md',\n            dqHelpText: null,\n            dsFileToRender: 'https://raw.githubusercontent.com/wiki/rabobank-cdc/DeTTECT/YAML-administration-data-sources.md',\n            dsHelpText: null,\n            emptyDataSourceObject: constants.YAML_OBJ_DATA_SOURCES\n        };\n    },\n    mixins: [pageMixin, navigateMixins, notificationMixin],\n    components: {\n        DataSourceDetail,\n        Icons\n    },\n    created: function() {\n        this.preloadMarkDown();\n    },\n    methods: {\n        readFile(event) {\n            // Loads and checks the file content\n            try {\n                let yaml_input = jsyaml.load(event.result);\n\n                if (yaml_input['file_type'] == 'data-source-administration') {\n                    if (yaml_input['version'] != constants.YAML_DATASOURCES_VERSION) {\n                        this.notifyDanger('Invalid file version', 'The version of the YAML file is not supported by this version of the Editor.');\n                    } else {\n                        ///////////////////////////////////////////////\n                        // Health checks before assignment to this.doc:\n                        ///////////////////////////////////////////////\n\n                        // Fix missing or empty platform:\n                        if (yaml_input.platform == undefined || yaml_input.platform == null) {\n                            yaml_input.platform = [];\n                        }\n\n                        // Fix a single platform string to list\n                        if (typeof yaml_input.platform == 'string') {\n                            yaml_input.platform = [yaml_input.platform];\n                        }\n\n                        // Only use valid platform values (in right casing):\n                        let valid_platforms = [];\n                        for (let i = 0; i < yaml_input.platform.length; i++) {\n                            if (this.platforms.indexOf(yaml_input.platform[i]) < 0) {\n                                let p = yaml_input.platform[i].toLowerCase();\n                                if (Object.keys(constants.PLATFORM_CONVERSION).indexOf(p) >= 0) {\n                                    valid_platforms.push(constants.PLATFORM_CONVERSION[p]);\n                                } else {\n                                    this.notifyDanger('Invalid value', 'Invalid value for platform was found in the YAML file and was removed.');\n                                }\n                            } else {\n                                valid_platforms.push(yaml_input.platform[i]);\n                            }\n                        }\n                        yaml_input.platform = valid_platforms;\n\n                        // Fix missing/invalid fields: 'products', available_for_data_analytics, data_quality\n                        for (let i = 0; i < yaml_input.data_sources.length; i++) {\n                            if (yaml_input.data_sources[i].products == undefined) {\n                                yaml_input.data_sources[i].products = [];\n                            }\n\n                            if (yaml_input.data_sources[i].available_for_data_analytics == undefined) {\n                                yaml_input.data_sources[i].available_for_data_analytics = false;\n                            }\n\n                            if (typeof yaml_input.data_sources[i].available_for_data_analytics != 'boolean') {\n                                yaml_input.data_sources[i].available_for_data_analytics = false;\n                            }\n\n                            if (yaml_input.data_sources[i].data_quality == undefined) {\n                                yaml_input.data_sources[i].data_quality = {\n                                    device_completeness: 0,\n                                    data_field_completeness: 0,\n                                    timeliness: 0,\n                                    consistency: 0,\n                                    retention: 0\n                                };\n                            }\n\n                            yaml_input.data_sources[i].data_quality.device_completeness = this.fixSDataQualityScore(\n                                yaml_input.data_sources[i].data_quality.device_completeness\n                            );\n                            yaml_input.data_sources[i].data_quality.data_field_completeness = this.fixSDataQualityScore(\n                                yaml_input.data_sources[i].data_quality.data_field_completeness\n                            );\n                            yaml_input.data_sources[i].data_quality.timeliness = this.fixSDataQualityScore(\n                                yaml_input.data_sources[i].data_quality.timeliness\n                            );\n                            yaml_input.data_sources[i].data_quality.consistency = this.fixSDataQualityScore(\n                                yaml_input.data_sources[i].data_quality.consistency\n                            );\n                            yaml_input.data_sources[i].data_quality.retention = this.fixSDataQualityScore(\n                                yaml_input.data_sources[i].data_quality.retention\n                            );\n                        }\n\n                        // For the following fields it's not a problem is they are missing because the GUI solves/handles this properly:\n                        // - date_registered. Also invalid values are handled correctly.\n                        // - date_connected. Also invalid values are handled correctly.\n                        // - comment\n\n                        this.doc = yaml_input;\n                        this.filename = this.selected_filename;\n                        this.filters.filter.value = '';\n                        while (this.selectedRow != null && this.selectedRow.length > 0) {\n                            this.selectedRow.pop();\n                        }\n\n                        // Fix the date to be in the correct date format (YYY-MM-DD):\n                        for (let i = 0; i < this.doc.data_sources.length; i++) {\n                            let dr = this.doc.data_sources[i]['date_registered'];\n                            let dv = this.doc.data_sources[i]['date_connected'];\n                            if (dr != null) {\n                                this.doc.data_sources[i]['date_registered'] = moment(dr, 'DD/MM/YYYY').format('YYYY-MM-DD');\n                            }\n                            if (dv != null) {\n                                this.doc.data_sources[i]['date_connected'] = moment(dv, 'DD/MM/YYYY').format('YYYY-MM-DD');\n                            }\n                        }\n\n                        this.prevDataSourceQuality = [];\n                        this.fileChanged = false;\n                        this.setWatch();\n\n                        // Reset the file reader for Chrome, so that it will be possible to load the same file again:\n                        document.getElementById('dsFileReader').value = null;\n                    }\n                } else {\n                    this.notifyInvalidFileType(this.selected_filename);\n                }\n            } catch (e) {\n                // alert(e);\n                this.notifyInvalidFileType(this.selected_filename);\n            }\n        },\n        newFile() {\n            this.filename = 'data-sources-new.yaml';\n            this.selected_filename = 'data-sources-new.yaml';\n            this.doc = _.cloneDeep(constants.YAML_OBJ_NEW_DATA_SOURCES_FILE);\n            this.selectedRow.pop();\n            this.deletedRows = [];\n            this.fileChanged = false;\n            this.setWatch();\n        },\n        fixSDataQualityScore(v) {\n            if (v == undefined) {\n                return 0;\n            } else if (v < 0) {\n                return 0;\n            } else if (v > 5) {\n                return 5;\n            } else if (typeof v == 'number') {\n                return v;\n            } else {\n                return 0;\n            }\n        },\n        cleanupBeforeDownload() {\n            // empty function. must be here to make downloadYaml() work for every page\n        },\n        convertBeforeDownload(newDoc) {\n            // Convert the date (which is a string in the GUI) to a real Date object in the YAML file\n            for (let i = 0; i < newDoc.data_sources.length; i++) {\n                if (newDoc.data_sources[i]['date_registered'] != null) {\n                    newDoc.data_sources[i]['date_registered'] = new Date(newDoc.data_sources[i]['date_registered']);\n                }\n                if (newDoc.data_sources[i]['date_connected'] != null) {\n                    newDoc.data_sources[i]['date_connected'] = new Date(newDoc.data_sources[i]['date_connected']);\n                }\n            }\n        },\n        deleteDataSource(event) {\n            this.deleteItem(event, 'data_sources', 'data_source_name', 'Data source', this.recoverDeletedDataSource);\n        },\n        recoverDeletedDataSource(data_source_name) {\n            this.recoverDeletedItem('data_sources', data_source_name);\n        },\n        preloadMarkDown() {\n            // Preload the data quality help text from Github\n            this.dqHelpText = 'Loading the help content...';\n            this.$http.get(this.dqFileToRender).then(\n                (response) => {\n                    // remove links to other wiki pages\n                    this.dqHelpText = response.body.replace(/\\[(.+)\\](\\([#\\w-]+\\))/gm, '$1');\n                },\n                // eslint-disable-next-line no-unused-vars\n                (response) => {\n                    this.dqHelpText = 'An error occurred while loading the help content.';\n                }\n            );\n\n            this.dsHelpText = 'Loading the help content...';\n            this.$http.get(this.dsFileToRender).then(\n                (response) => {\n                    this.dsHelpText = response.body.replace(/\\[(.+)\\](\\([#\\w-]+\\))/gm, '$1'); // remove links to other wiki pages\n                    this.dsHelpText = this.dsHelpText.match(/## Data source object((.*|\\n)*)/gim, '$1')[0];\n                    this.dsHelpText = this.dsHelpText.replace(/^## Data source object/gim, '');\n                    this.dsHelpText = this.dsHelpText.replace(/^## .+((.*|\\n)*)/gim, '');\n                },\n                // eslint-disable-next-line no-unused-vars\n                (response) => {\n                    this.dsHelpText = 'An error occurred while loading the help content.';\n                }\n            );\n        },\n        notifyInvalidFileType(filename) {\n            this.notifyDanger('Invalid YAML file type', \"The file '\" + filename + \"' is not a valid data source administration file.\");\n        }\n    },\n    filters: {\n        listToString: function(value) {\n            if (Array.isArray(value)) {\n                return value.join(', ');\n            } else {\n                return value;\n            }\n        }\n    }\n};\n</script>\n\n<style></style>\n"]}]}