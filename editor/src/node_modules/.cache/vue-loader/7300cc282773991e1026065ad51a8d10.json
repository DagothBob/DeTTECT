{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/holger/DeTTECT_Project/DeTTECT/editor/src/pages/TechniquesPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/holger/DeTTECT_Project/DeTTECT/editor/src/pages/TechniquesPage.vue","mtime":1638053205634},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":1638056082284},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":1638056082020},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":1638056081964}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["TechniquesPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"TechniquesPage.vue","sourceRoot":"pages","sourcesContent":["<template>\n    <div>\n        <div v-if=\"doc != null\" class=\"back-to-top\">\n            <label @click=\"navigateToTop\" class=\"cursor-pointer\" title=\"Back to top\">\n                <icons icon=\"arrow-up\"></icons>\n            </label>\n        </div>\n\n        <div class=\"row\" id=\"pageTop\">\n            <div class=\"col\">\n                <div class=\"card card-card\">\n                    <div class=\"card-header\">\n                        <h2 class=\"card-title\"><i class=\"tim-icons icon-zoom-split\"></i> Techniques</h2>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"row\">\n                            <div class=\"col\">\n                                <button type=\"button\" class=\"btn mr-md-3\" @click=\"askNewFile\">\n                                    <icons icon=\"file-empty\"></icons>\n                                    &nbsp;New file\n                                </button>\n                                <label class=\"custom-file-upload\">\n                                    <icons icon=\"file\"></icons>\n                                    &nbsp;Select YAML file\n                                    <file-reader @load=\"readFile($event)\" :setFileNameFn=\"setFileName\" :id=\"'techniqueFileReader'\"></file-reader>\n                                </label>\n                                <label v-if=\"fileChanged\" class=\"pl-2\">\n                                    <icons icon=\"text-balloon\"></icons>\n                                    You have unsaved changes. You may want to save the file to preserve your changes.</label\n                                >\n                            </div>\n                        </div>\n                        <div v-if=\"doc != null\" class=\"row pt-md-2\">\n                            <div class=\"col\">\n                                <file-details :filename=\"filename\" :doc=\"doc\" :platforms=\"platforms\"></file-details>\n                            </div>\n                        </div>\n                        <div v-if=\"doc != null\" class=\"row pt-md-2\">\n                            <div class=\"col card-text\">\n                                <button type=\"button\" class=\"btn\" @click=\"downloadYaml('techniques', 'technique_id')\">\n                                    <icons icon=\"save\"></icons>\n                                    &nbsp;Save YAML file\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div v-if=\"doc != null\" class=\"row\">\n            <div class=\"col\">\n                <card type=\"card\">\n                    <div class=\"row\">\n                        <div class=\"col\">\n                            <p>\n                                <button type=\"button\" class=\"btn btn-secondary\" @click=\"addItem('techniques', 'technique_id', emptyTechObject)\">\n                                    <icons icon=\"plus\"></icons>\n                                    &nbsp;Add technique\n                                </button>\n                            </p>\n                        </div>\n                    </div>\n                    <div class=\"row mt-md-2\">\n                        <div class=\"col\">\n                            <base-input v-model=\"filters.filter.value\" placeholder=\"filter\" />\n                            <v-table\n                                :data=\"doc.techniques\"\n                                @selectionChanged=\"selectTechnique($event)\"\n                                selectedClass=\"table-selected-custom\"\n                                :filters=\"filters\"\n                                class=\"table-custom\"\n                                ref=\"data_table\"\n                            >\n                                <thead slot=\"head\">\n                                    <v-th sortKey=\"technique_id\" defaultSort=\"asc\" width=\"200\">Technique ID</v-th>\n                                    <v-th sortKey=\"technique_name\" width=\"400\">Name</v-th>\n                                    <th></th>\n                                </thead>\n                                <tbody slot=\"body\" slot-scope=\"{ displayData }\">\n                                    <v-tr v-for=\"(row, i) in displayData\" :key=\"row.technique_id\" :row=\"row\" ref=\"data_table_rows\">\n                                        <td>{{ row.technique_id }}</td>\n                                        <td>{{ row.technique_name }}</td>\n                                        <td>\n                                            <i\n                                                class=\"tim-icons icon-trash-simple cursor-pointer\"\n                                                :idx=\"i\"\n                                                :technique_id=\"row.technique_id\"\n                                                @click=\"deleteTechnique($event)\"\n                                            />\n                                        </td>\n                                    </v-tr>\n                                </tbody>\n                            </v-table>\n                        </div>\n                    </div>\n                </card>\n            </div>\n            <div class=\"col\">\n                <card type=\"card\">\n                    <techniques-detail\n                        v-if=\"getSelectedItem() != null\"\n                        :technique=\"getSelectedItem()\"\n                        :allTechniques=\"doc.techniques\"\n                        :selectedPlatforms=\"doc.platform\"\n                        ref=\"detailComponent\"\n                        :navigateItem=\"navigateItem\"\n                    ></techniques-detail>\n                </card>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport TechniquesDetail from './TechniquesDetail';\nimport Icons from '@/components/Icons';\nimport jsyaml from 'js-yaml';\nimport moment from 'moment';\nimport constants from '@/constants';\nimport { pageMixin } from '../mixins/PageMixins.js';\nimport { navigateMixins } from '../mixins/NavigateMixins.js';\nimport { notificationMixin } from '../mixins/NotificationMixins.js';\nimport _ from 'lodash';\n\nexport default {\n    name: 'techniques-page',\n    data() {\n        return {\n            filters: {\n                filter: {\n                    value: '',\n                    keys: ['technique_id', 'technique_name']\n                }\n            },\n            data_columns: ['technique_id', 'technique_name'],\n            emptyTechObject: constants.YAML_OBJ_TECHNIQUE\n        };\n    },\n    mixins: [pageMixin, navigateMixins, notificationMixin],\n    components: {\n        TechniquesDetail,\n        Icons\n    },\n    methods: {\n        readFile(event) {\n            // Loads and checks the file content\n            try {\n                let yaml_input = jsyaml.load(event.result);\n\n                if (yaml_input['file_type'] == 'technique-administration') {\n                    if (yaml_input['version'] != constants.YAML_TECHNIQUES_VERSION) {\n                        this.notifyDanger('Invalid file version', 'The version of the YAML file is not supported by this version of the Editor.');\n                    } else {\n                        ///////////////////////////////////////////////\n                        // Health checks before assignment to this.doc:\n                        ///////////////////////////////////////////////\n\n                        // Fix missing or empty platform:\n                        if (yaml_input.platform == undefined || yaml_input.platform == null) {\n                            yaml_input.platform = [];\n                        }\n\n                        // Fix a single platform string to list\n                        if (typeof yaml_input.platform == 'string') {\n                            yaml_input.platform = [yaml_input.platform];\n                        }\n\n                        // Only use valid platform values (in right casing):\n                        let valid_platforms = [];\n                        for (let i = 0; i < yaml_input.platform.length; i++) {\n                            if (this.platforms.indexOf(yaml_input.platform[i]) < 0) {\n                                let p = yaml_input.platform[i].toLowerCase();\n                                if (Object.keys(constants.PLATFORM_CONVERSION).indexOf(p) >= 0) {\n                                    valid_platforms.push(constants.PLATFORM_CONVERSION[p]);\n                                } else {\n                                    this.notifyDanger('Invalid value', 'Invalid value for platform was found in the YAML file and was removed.');\n                                }\n                            } else {\n                                valid_platforms.push(yaml_input.platform[i]);\n                            }\n                        }\n                        yaml_input.platform = valid_platforms;\n\n                        // Fix missing/invalid fields:\n                        for (let i = 0; i < yaml_input.techniques.length; i++) {\n                            // Fix no detection node:\n                            if (yaml_input.techniques[i].detection == undefined) {\n                                yaml_input.techniques[i].detection = new Array(_.cloneDeep(constants.YAML_OBJ_TECHNIQUE_DETECTION));\n                            } else if (!Array.isArray(yaml_input.techniques[i].detection)) {\n                                // Put single detection item in list:\n                                yaml_input.techniques[i].detection = new Array(yaml_input.techniques[i].detection);\n                            }\n\n                            // Fix no visibility node:\n                            if (yaml_input.techniques[i].visibility == undefined) {\n                                yaml_input.techniques[i].visibility = new Array(_.cloneDeep(constants.YAML_OBJ_TECHNIQUE_VISIBILITY));\n                            } else if (!Array.isArray(yaml_input.techniques[i].visibility)) {\n                                // Put single visibility item in list:\n                                yaml_input.techniques[i].visibility = new Array(yaml_input.techniques[i].visibility);\n                            }\n\n                            // Check detection fields:\n                            for (let x = 0; x < yaml_input.techniques[i].detection.length; x++) {\n                                if (yaml_input.techniques[i].detection[x].applicable_to == undefined) {\n                                    yaml_input.techniques[i].detection[x].applicable_to = ['all'];\n                                }\n                                if (yaml_input.techniques[i].detection[x].location == undefined) {\n                                    yaml_input.techniques[i].detection[x].location = [];\n                                }\n                                let length_location = yaml_input.techniques[i].detection[x].location.length;\n                                while (length_location--) {\n                                    if (yaml_input.techniques[i].detection[x].location[length_location] == '') {\n                                        yaml_input.techniques[i].detection[x].location.splice(length_location, 1);\n                                    }\n                                }\n                                if (yaml_input.techniques[i].detection[x].comment == undefined) {\n                                    yaml_input.techniques[i].detection[x].comment = '';\n                                }\n                                if (\n                                    yaml_input.techniques[i].detection[x].score_logbook == undefined ||\n                                    yaml_input.techniques[i].detection[x].score_logbook.length == 0\n                                ) {\n                                    yaml_input.techniques[i].detection[x].score_logbook = new Array(\n                                        _.cloneDeep(constants.YAML_OBJ_SCORE_DETECTION_LOGBOOK)\n                                    );\n                                }\n\n                                // Check score log book variables:\n                                for (let j = 0; j < yaml_input.techniques[i].detection[x].score_logbook.length; j++) {\n                                    if (yaml_input.techniques[i].detection[x].score_logbook[j].date == undefined) {\n                                        yaml_input.techniques[i].detection[x].score_logbook[j].date = null;\n                                    }\n                                    if (yaml_input.techniques[i].detection[x].score_logbook[j].score == undefined) {\n                                        yaml_input.techniques[i].detection[x].score_logbook[j].score = -1;\n                                    } else {\n                                        yaml_input.techniques[i].detection[x].score_logbook[j].score = this.fixSDetectionScore(\n                                            yaml_input.techniques[i].detection[x].score_logbook[j].score\n                                        );\n                                    }\n                                    if (yaml_input.techniques[i].detection[x].score_logbook[j].comment == undefined) {\n                                        yaml_input.techniques[i].detection[x].score_logbook[j].comment = '';\n                                    }\n                                    if (yaml_input.techniques[i].detection[x].score_logbook[j].date != null) {\n                                        yaml_input.techniques[i].detection[x].score_logbook[j].date = moment(\n                                            yaml_input.techniques[i].detection[x].score_logbook[j].date,\n                                            'DD/MM/YYYY'\n                                        ).format('YYYY-MM-DD');\n                                    }\n                                }\n                            }\n\n                            // Check visibility fields:\n                            for (let x = 0; x < yaml_input.techniques[i].visibility.length; x++) {\n                                if (yaml_input.techniques[i].visibility[x].applicable_to == undefined) {\n                                    yaml_input.techniques[i].visibility[x].applicable_to = ['all'];\n                                }\n                                if (yaml_input.techniques[i].visibility[x].comment == undefined) {\n                                    yaml_input.techniques[i].visibility[x].comment = '';\n                                }\n                                if (\n                                    yaml_input.techniques[i].visibility[x].score_logbook == undefined ||\n                                    yaml_input.techniques[i].visibility[x].score_logbook.length == 0\n                                ) {\n                                    yaml_input.techniques[i].visibility[x].score_logbook = new Array(\n                                        _.cloneDeep(constants.YAML_OBJ_SCORE_VISIBILITY_LOGBOOK)\n                                    );\n                                }\n\n                                // Check score log book variables:\n                                for (let j = 0; j < yaml_input.techniques[i].visibility[x].score_logbook.length; j++) {\n                                    if (yaml_input.techniques[i].visibility[x].score_logbook[j].date == undefined) {\n                                        yaml_input.techniques[i].visibility[x].score_logbook[j].date = null;\n                                    }\n                                    if (yaml_input.techniques[i].visibility[x].score_logbook[j].score == undefined) {\n                                        yaml_input.techniques[i].visibility[x].score_logbook[j].score = 0;\n                                    } else {\n                                        yaml_input.techniques[i].visibility[x].score_logbook[j].score = this.fixVisibilityScore(\n                                            yaml_input.techniques[i].visibility[x].score_logbook[j].score\n                                        );\n                                    }\n                                    if (yaml_input.techniques[i].visibility[x].score_logbook[j].comment == undefined) {\n                                        yaml_input.techniques[i].visibility[x].score_logbook[j].comment = '';\n                                    }\n                                    if (yaml_input.techniques[i].visibility[x].score_logbook[j].date != null) {\n                                        yaml_input.techniques[i].visibility[x].score_logbook[j].date = moment(\n                                            yaml_input.techniques[i].visibility[x].score_logbook[j].date,\n                                            'DD/MM/YYYY'\n                                        ).format('YYYY-MM-DD');\n                                    }\n                                    if (yaml_input.techniques[i].visibility[x].score_logbook[j].auto_generated == undefined) {\n                                        yaml_input.techniques[i].visibility[x].score_logbook[j].auto_generated = false;\n                                    }\n                                    if (typeof yaml_input.techniques[i].visibility[x].score_logbook[j].auto_generated != 'boolean') {\n                                        yaml_input.techniques[i].visibility[x].score_logbook[j].auto_generated = false;\n                                    }\n                                }\n                            }\n\n                            // Check overlapping applicable_to values for detection:\n                            let applicable_to_list_detection = [];\n                            let notifiedList_detection = [];\n                            for (let x = 0; x < yaml_input.techniques[i].detection.length; x++) {\n                                for (let j = 0; j < yaml_input.techniques[i].detection[x].applicable_to.length; j++) {\n                                    applicable_to_list_detection.push(yaml_input.techniques[i].detection[x].applicable_to[j]);\n                                }\n                            }\n                            for (let x = 0; x < applicable_to_list_detection.length; x++) {\n                                let c = 0;\n                                for (let j = 0; j < applicable_to_list_detection.length; j++) {\n                                    if (applicable_to_list_detection[x] == applicable_to_list_detection[j]) {\n                                        c++;\n                                    }\n                                }\n                                if (c > 1 && !notifiedList_detection.includes(applicable_to_list_detection[x])) {\n                                    notifiedList_detection.push(applicable_to_list_detection[x]);\n                                    this.notifyOverlappingApplicableTo(\n                                        'detection',\n                                        yaml_input.techniques[i].technique_id,\n                                        applicable_to_list_detection[x]\n                                    );\n                                }\n                            }\n\n                            // Check overlapping applicable_to values for visibility:\n                            let applicable_to_list_visibility = [];\n                            let notifiedList_visibility = [];\n                            for (let x = 0; x < yaml_input.techniques[i].visibility.length; x++) {\n                                for (let j = 0; j < yaml_input.techniques[i].visibility[x].applicable_to.length; j++) {\n                                    applicable_to_list_visibility.push(yaml_input.techniques[i].visibility[x].applicable_to[j]);\n                                }\n                            }\n                            for (let x = 0; x < applicable_to_list_visibility.length; x++) {\n                                let c = 0;\n                                for (let j = 0; j < applicable_to_list_visibility.length; j++) {\n                                    if (applicable_to_list_visibility[x] == applicable_to_list_visibility[j]) {\n                                        c++;\n                                    }\n                                }\n                                if (c > 1 && !notifiedList_visibility.includes(applicable_to_list_visibility[x])) {\n                                    notifiedList_visibility.push(applicable_to_list_visibility[x]);\n                                    this.notifyOverlappingApplicableTo(\n                                        'visibility',\n                                        yaml_input.techniques[i].technique_id,\n                                        applicable_to_list_visibility[x]\n                                    );\n                                }\n                            }\n                        }\n\n                        this.doc = yaml_input;\n                        this.filename = this.selected_filename;\n                        this.filters.filter.value = '';\n                        while (this.selectedRow != null && this.selectedRow.length > 0) {\n                            this.selectedRow.pop();\n                        }\n\n                        this.fileChanged = false;\n                        if (this.unwatchFunction != null) {\n                            this.unwatchFunction();\n                        }\n                        this.unwatchFunction = this.$watch(\n                            'doc',\n                            // eslint-disable-next-line no-unused-vars\n                            function(after, before) {\n                                this.fileChanged = true;\n                            },\n                            { deep: true }\n                        );\n\n                        // Reset the file reader for Chrome, so that it will be possible to load the same file again:\n                        document.getElementById('techniqueFileReader').value = null;\n                    }\n                } else {\n                    this.notifyInvalidFileType(this.selected_filename);\n                }\n            } catch (e) {\n                alert(e);\n                this.notifyInvalidFileType(this.selected_filename);\n            }\n        },\n        newFile() {\n            this.filename = 'techniques-administration-new.yaml';\n            this.selected_filename = 'techniques-administration-new.yaml';\n            this.doc = _.cloneDeep(constants.YAML_OBJ_NEW_TECHNIQUES_FILE);\n            this.selectedRow.pop();\n            this.deletedRows = [];\n            this.fileChanged = false;\n            this.setWatch();\n        },\n        fixSDetectionScore(d) {\n            if (d == undefined) {\n                return -1;\n            } else if (d < -1) {\n                return -1;\n            } else if (d > 5) {\n                return 5;\n            } else if (typeof d == 'number') {\n                return d;\n            } else {\n                return -1;\n            }\n        },\n        fixVisibilityScore(v) {\n            if (v == undefined) {\n                return 0;\n            } else if (v < 0) {\n                return 0;\n            } else if (v > 4) {\n                return 4;\n            } else if (typeof v == 'number') {\n                return v;\n            } else {\n                return 0;\n            }\n        },\n        cleanupBeforeDownload() {\n            // Remove empty score logbook rows in detection:\n            for (let i = 0; i < this.doc.techniques.length; i++) {\n                for (let x = 0; x < this.doc.techniques[i].detection.length; x++) {\n                    let indexEmptyScoreLogbook = -1;\n                    for (let j = 0; j < this.doc.techniques[i].detection[x].score_logbook.length; j++) {\n                        if (this.doc.techniques[i].detection[x].score_logbook.length == 1) {\n                            break;\n                        }\n                        let d = this.doc.techniques[i].detection[x].score_logbook[j].date;\n                        if (d == null || d == '') {\n                            indexEmptyScoreLogbook = j;\n                        }\n                    }\n                    if (indexEmptyScoreLogbook >= 0) {\n                        this.doc.techniques[i].detection[x].score_logbook.splice(indexEmptyScoreLogbook, 1);\n                    }\n                }\n            }\n\n            // Remove empty score logbook rows in visibility:\n            for (let i = 0; i < this.doc.techniques.length; i++) {\n                for (let x = 0; x < this.doc.techniques[i].visibility.length; x++) {\n                    let indexEmptyScoreLogbook = -1;\n                    for (let j = 0; j < this.doc.techniques[i].visibility[x].score_logbook.length; j++) {\n                        if (this.doc.techniques[i].visibility[x].score_logbook.length == 1) {\n                            break;\n                        }\n                        let d = this.doc.techniques[i].visibility[x].score_logbook[j].date;\n                        if (d == null || d == '') {\n                            indexEmptyScoreLogbook = j;\n                        }\n                    }\n                    if (indexEmptyScoreLogbook >= 0) {\n                        this.doc.techniques[i].visibility[x].score_logbook.splice(indexEmptyScoreLogbook, 1);\n                    }\n                }\n            }\n        },\n        convertBeforeDownload(newDoc) {\n            // Convert the date (which is a string in the GUI) to a real Date object in the YAML file\n            for (let i = 0; i < newDoc.techniques.length; i++) {\n                for (let x = 0; x < newDoc.techniques[i].detection.length; x++) {\n                    for (let j = 0; j < newDoc.techniques[i].detection[x].score_logbook.length; j++) {\n                        if (newDoc.techniques[i].detection[x].score_logbook[j]['date'] != null) {\n                            newDoc.techniques[i].detection[x].score_logbook[j]['date'] = new Date(\n                                newDoc.techniques[i].detection[x].score_logbook[j]['date']\n                            );\n                        }\n                    }\n                }\n            }\n            for (let i = 0; i < newDoc.techniques.length; i++) {\n                for (let x = 0; x < newDoc.techniques[i].visibility.length; x++) {\n                    for (let j = 0; j < newDoc.techniques[i].visibility[x].score_logbook.length; j++) {\n                        if (newDoc.techniques[i].visibility[x].score_logbook[j]['date'] != null) {\n                            newDoc.techniques[i].visibility[x].score_logbook[j]['date'] = new Date(\n                                newDoc.techniques[i].visibility[x].score_logbook[j]['date']\n                            );\n                        }\n                    }\n                }\n            }\n        },\n        selectTechnique(event) {\n            if (this.$refs.detailComponent != undefined) {\n                this.$refs.detailComponent.closeAllCollapses();\n            }\n            this.selectItem(event);\n        },\n        selectTechniqueId(technique_id) {\n            let row = null;\n            for (let i = 0; i < this.doc.techniques.length; i++) {\n                if (this.doc.techniques[i].technique_id == technique_id) {\n                    row = this.doc.techniques[i];\n                }\n            }\n            if (row != null) {\n                this.selectedRow.pop();\n                this.selectedRow.push(row);\n            }\n        },\n        deleteTechnique(event) {\n            this.deleteItem(event, 'techniques', 'technique_id', 'Technique', this.recoverDeletedTechnique);\n        },\n        recoverDeletedTechnique(technique_id) {\n            this.recoverDeletedItem('techniques', technique_id);\n        },\n        notifyInvalidFileType(filename) {\n            this.notifyDanger('Invalid YAML file type', \"The file '\" + filename + \"' is not a valid technique administration file.\");\n        },\n        notifyOverlappingApplicableTo(type, technique_id, value) {\n            this.notifyDangerWithCallback(\n                \"Overlapping value in 'applicable_to'\",\n                \"A duplicate value for 'applicable_to' was found within the \" + type + ' section of technique ' + technique_id + \": '\" + value + \"'\",\n                this.selectTechniqueId,\n                'Go to technique ' + technique_id,\n                technique_id,\n                true\n            );\n        }\n    }\n};\n</script>\n\n<style></style>\n"]}]}